/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule CompatStory
 */

'use strict';

var _graphql;

const { createFragmentContainer, graphql } = require('Relay');
const React = require('React');
const CompatProfilePic = require('CompatProfilePic');

class CompatStory extends React.Component {
  render() {
    return <div>
      <CompatProfilePic user={this.props.story.actor} />
      {this.props.story.message}
    </div>;
  }

  doSomething() {
    commitMutation(this.props.relay, _graphql || (_graphql = {
      modern: function () {
        return require('./__generated__/LikeStory.graphql');
      },
      classic: function () {
        const RelayQL_GENERATED = require('RelayQL_GENERATED'),
              CompatStory_story = (CompatStory.__container__ || CompatStory).getFragment('story');

        return {
          kind: 'OperationDefinition',
          argumentDefinitions: [{
            defaultValue: null,
            kind: 'LocalArgument',
            name: 'id'
          }],
          name: 'LikeStory',
          operation: 'mutation',
          node: function () {
            throw new Error('Relay transform error ``You supplied a field named `likeStory` on type `Mutation`, but no such field exists on that type.`` in file `unknown`. Try updating your GraphQL schema if an argument/field/type was recently added.');
          }()
        };
      }
    }), { id: 123 });
  }
}

module.exports = createFragmentContainer(CompatStory, {
  story: {
    modern: function () {
      return require('./__generated__/CompatStory_story.graphql');
    },
    classic: function () {
      const RelayQL_GENERATED = require('RelayQL_GENERATED'),
            CompatProfilePic_user = CompatProfilePic.getFragment('user');

      return {
        kind: 'FragmentDefinition',
        argumentDefinitions: [],
        node: function () {
          return {
            children: [{
              fieldName: 'message',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true
              },
              type: 'Text'
            }, {
              children: [].concat.apply([], [{
                fieldName: 'id',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'ID'
              }, {
                fieldName: '__typename',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'String'
              }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
              fieldName: 'actor',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: 'node',
                inferredPrimaryKey: 'id',
                isAbstract: true
              },
              type: 'Actor'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }],
            id: RelayQL_GENERATED.__id(),
            kind: 'Fragment',
            metadata: {},
            name: 'CompatStory_story',
            type: 'Story'
          };
        }()
      };
    }
  }
});
