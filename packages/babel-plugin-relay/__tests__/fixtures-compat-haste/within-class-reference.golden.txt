/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule CompatStory
 */

'use strict';

var _graphql;

const { createFragmentContainer, graphql } = require('Relay');
const React = require('React');
const CompatProfilePic = require('CompatProfilePic');

class CompatProfile extends React.Component {
  render() {
    return <div>
      <CompatProfilePic user={this.props.data} />
      {this.props.data.name}
      {this.props.data.subscribeStatus}
    </div>;
  }

  doSomething() {
    commitMutation(this.props.relay, _graphql || (_graphql = {
      modern: function () {
        return require('ActorSubscribe.graphql');
      },
      classic: function () {
        const RelayQL_GENERATED = require('RelayQL_GENERATED'),
              CompatProfile = (CompatProfile.__container__ || CompatProfile).getFragment('data');

        return {
          kind: 'OperationDefinition',
          argumentDefinitions: [{
            defaultValue: null,
            kind: 'LocalArgument',
            name: 'input'
          }],
          name: 'ActorSubscribe',
          operation: 'mutation',
          node: RelayQL_GENERATED`mutation ActorSubscribe($input: ActorSubscribeInput!) {
  actorSubscribe(input: $input) {
    subscribee {
      ...CompatProfile
    }
  }
}`
        };
      }
    }), { input: { subscribeeId: 123 } });
  }
}

module.exports = createFragmentContainer(CompatProfile, {
  data: {
    modern: function () {
      return require('CompatProfile.graphql');
    },
    classic: function () {
      const RelayQL_GENERATED = require('RelayQL_GENERATED'),
            CompatProfilePic_user = CompatProfilePic.getFragment('user');

      return {
        kind: 'FragmentDefinition',
        argumentDefinitions: [],
        node: RelayQL_GENERATED`fragment CompatProfile on Actor {
  name
  subscribeStatus
  ...CompatProfilePic_user
}`
      };
    }
  }
});
